# Задача 1. Даны значения величины заработной платы заемщиков банка (zp) и значения их
# поведенческого кредитного скоринга (ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]. Используя математические
# операции, посчитать коэффициенты линейной регрессии, приняв за X заработную плату
# (то есть, zp - признак), а за y - значения скорингового балла (то есть, ks - целевая переменная).
# Произвести расчет как с использованием intercept, так и без.

# Задача 2 Посчитать коэффициент линейной регрессии при заработной плате (zp), используя
# градиентный спуск (без intercept).

# Задача 3 (Дополнительно) Произвести вычисления как в пункте 2, но с вычислением intercept. Учесть, что
# изменение коэффициентов должно производиться
# на каждом шаге одновременно (то есть изменение одного коэффициента не должно
# влиять на изменение другого во время одной итерации).

import numpy as np

#1
print ('Задача 1')
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

X = np.vstack([np.ones(len(zp)), zp]).T
B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(ks)
print("Коэффициенты линейной регрессии с использованием intercept:", B)

X = zp.reshape(-1, 1)
B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(ks)
print("Коэффициенты линейной регрессии без использования intercept:", B)


#2
print ('\nЗадача 2')
b = 0
alpha = 0.0001
iterations = 1000
for i in range(iterations):
    b -= alpha * (2/len(zp)) * np.sum((b * zp - ks) * zp)
    
print(b)


#3
print ('\nЗадача 3')
b0 = 0
b1 = 0
alpha = 0.0001

iterations = 1000

for i in range(iterations):
    y_pred = b0 + b1 * zp
    b0 -= alpha * (2/len(zp)) * np.sum(y_pred - ks)
    b1 -= alpha * (2/len(zp)) * np.sum((y_pred - ks) * zp)
    
print(b0, b1)