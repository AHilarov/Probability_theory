# 1. Случайная непрерывная величина A имеет равномерное распределение на промежутке (200, 800].
# Найдите ее среднее значение и дисперсию.

# 2. О случайной непрерывной равномерно распределенной величине B известно, что ее дисперсия равна 0.2.
# Можно ли найти правую границу величины B и ее среднее значение зная, что левая граница равна 0.5? Если да, найдите ее.

# 3. Непрерывная случайная величина X распределена нормально и задана плотностью распределения
# f(x) = (1 / (4 * sqrt(2pi))) * exp((-(x+2)**2) / 32)
# Найдите:
# а). M(X)
# б). D(X)
# в). std(X) (среднее квадратичное отклонение)

# 4. Рост взрослого населения города X имеет нормальное распределение.
# Причем, средний рост равен 174 см, а среднее квадратичное отклонение равно 8 см.
# Какова вероятность того, что случайным образом выбранный взрослый человек имеет рост:
# а). больше 182 см
# б). больше 190 см
# в). от 166 см до 190 см
# г). от 166 см до 182 см
# д). от 158 см до 190 см
# е). не выше 150 см или не ниже 190 см
# ё). не выше 150 см или не ниже 198 см
# ж). ниже 166 см.

# 5. На сколько сигм (средних квадратичных отклонений) отклоняется рост человека, равный 190 см,
# от математического ожидания роста в популяции, в которой M(X) = 178 см и D(X) = 25 кв.см?

#1
print ('Задача 1')
# Границы промежутка
a = 200
b = 800

# Среднее значение
mean = (a + b) / 2
print("Среднее значение:", mean)

# Дисперсия
variance = ((b - a)**2) / 12
print("Дисперсия:", variance)



#2
print ('\nЗадача 2')
import math

a = 0.5
variance = 0.2
b = math.sqrt(variance * 12) + a
mean = (a + b) / 2

print("Правая граница величины B:", b)
print("Среднее значение величины B:", mean) 



#3
print ('\nЗадача 3')
mu = -2 # сдвиг
sigma = 4 # стандартное отклонение

M = mu
D = sigma**2
std = math.sqrt(D)

print("M(X) =", M)
print("D(X) =", D)
print("std(X) =", std)


#4
print ('\nЗадача 4')
mu = 174 # среднее значение
sigma = 8 # стандартное отклонение

# Функция распределения вероятностей
def F(x):
    return (1 / (sigma * math.sqrt(2 * math.pi))) * math.exp(-(x - mu)**2 / (2 * sigma**2))

# Обратная функция распределения вероятностей
def F_inv(p):
    # Начальное приближение для метода Ньютона
    x0 = mu
    # Количество итераций для метода Ньютона
    max_iter = 100
    # Точность вычислений
    eps = 1e-8
    
    # Метод Ньютона для решения уравнения F(x) = p
    for i in range(max_iter):
        fx = F(x0) - p
        fpx = (1 / (sigma * math.sqrt(2 * math.pi))) * math.exp(-(x0 - mu)**2 / (2 * sigma**2)) / sigma
        x1 = x0 - fx / fpx
        if abs(x1 - x0) < eps:
            return x1
        x0 = x1
    
    # Если не удалось найти решение, возвращаем None
    return None

# а) больше 182 см
p_a = 1 - F(182)
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост больше 182 см:", round(p_a, 4))

# б) больше 190 см
p_b = 1 - F(190)
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост больше 190 см:", round(p_b, 4))

# в) от 166 см до 190 см
p_c = F(190) - F(166)
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост от 166 см до 190 см:", round(p_c, 4))

# г) от 166 см до 182 см
p_d = F(182) - F(166)
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост от 166 см до 182 см:", round(p_d, 4))

# д) от 158 см до 190 см
p_e = F(190) - F(158)
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост от 158 см до 190 см:", round(p_e, 4))

# е) не выше 150 см или не ниже 190 см
p_f = F(150) + (1 - F(190))
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост не выше 150 см или не ниже 190 см:", round(p_f, 4))

# ё) не выше 150 см или не ниже 198 см
p_g = F(150) + (1 - F(198))
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост не выше 150 см или не ниже 198 см:", round(p_g, 4))

# ж) ниже 166 см
p_h = F(166)
print("Вероятность того, что случайным образом выбранный взрослый человек имеет рост ниже 166 см:", round(p_h, 4))


#5
print ('\nЗадача 5')
X = 190
mu = 178
D = 25

sigma = math.sqrt(D)
z = (X - mu) / sigma

print("Отклонение роста на", round(z, 2), "сигм")